#!/usr/bin/env bash
set -euo pipefail

ROOT_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")/.." && pwd)"
REPOS_YML="$ROOT_DIR/repos.yml"

die(){ echo "ERR: $*" >&2; exit 1; }

mode() {
  python3 - <<'PY' "$REPOS_YML"
import sys, yaml

with open(sys.argv[1]) as fh:
    data = yaml.safe_load(fh) or {}

print(data.get('mode', 'static'))
PY
}

owner() {
  python3 - <<'PY' "$REPOS_YML"
import sys, yaml

with open(sys.argv[1]) as fh:
    data = yaml.safe_load(fh) or {}

print((data.get('github') or {}).get('owner', ''))
PY
}

repos_from_github() {
  local ow="$(owner)"
  command -v gh >/dev/null 2>&1 || die "GitHub CLI (gh) fehlt."
  local payload
  if ! payload="$(gh repo list "$ow" --json name,isPrivate,isFork --limit 200 2>/dev/null)"; then
    return 1
  fi
  jq -r '.[] | select(.isFork == false) | select(.isPrivate == false) | .name' <<<"$payload"
}

repos_from_static() {
  python3 - <<'PY' "$REPOS_YML"
import sys, yaml

with open(sys.argv[1]) as fh:
    data = yaml.safe_load(fh) or {}

for name in ((data.get('static') or {}).get('include') or []):
    print(name)
PY
}

repos() {
  local m; m="$(mode)"
  if [[ "$m" == "github" ]]; then
    if repos_from_github; then
      return 0
    fi
    echo "WARN: GitHub API nicht erreichbar – fallback auf static.include" >&2
  fi
  repos_from_static
}

cmd_list() {
  echo "▶ Fleet-Repos:"
  repos | sed 's/^/ - /'
}

copy_templates_into_repo() {
  local r="$1"
  local tmp
  tmp="$(mktemp -d)"
  rsync -a --delete "$ROOT_DIR/templates/" "$tmp/"
  # Platzhalter ersetzen (simple)
  find "$tmp" -type f -print0 | xargs -0 sed -i "s/{{REPO_NAME}}/${r}/g"

  # Klonen (shallow) in tmp, syncen, PR optional
  local ow; ow="$(owner)"
  local url="git@github.com:${ow}/${r}.git"
  local workdir
  workdir="$(mktemp -d)"
  if ! git clone --depth 1 "$url" "$workdir"; then
    echo "WARN: git clone fehlgeschlagen für $url – übersprungen" >&2
    rm -rf "$tmp" "$workdir"
    return
  fi

  rsync -a "$tmp/." "$workdir/"

  pushd "$workdir" >/dev/null
    git checkout -b chore/wgx-sync-$(date +%Y%m%d-%H%M%S) || true
    git add -A
    if ! git diff --cached --quiet; then
      git commit -m "chore(wgx): sync templates from metarepo"
      git push -u origin HEAD
      gh pr create --title "chore(wgx): sync templates" --body "Sync from metarepo templates" || true
    else
      echo "No changes for $r"
    fi
  popd >/dev/null
  rm -rf "$tmp" "$workdir"
}

cmd_up() {
  repos | while read -r r; do
    [[ -z "$r" ]] && continue
    echo "▸ Sync $r"
    copy_templates_into_repo "$r"
  done
}

cmd_run() {
  local target="${1:-smoke}"
  repos | while read -r r; do
    echo "▸ $r → $target"
    gh workflow run "$target" --repo "$(owner)/$r" || echo "skip"
  done
}

cmd_validate() {
  echo "Check: repos.yml schema"
  python3 - <<'PY' "$REPOS_YML"
import sys, yaml

with open(sys.argv[1]) as fh:
    yaml.safe_load(fh)
PY
  echo "OK."
}

cmd_doctor() {
  for bin in python3 jq rsync git gh; do
    command -v "$bin" >/dev/null || echo "WARN: $bin fehlt"
  done
  echo "owner=$(owner)"
  echo "mode=$(mode)"
}

cmd_smoke() {
  repos | wc -l | xargs -I{} echo "Repos in scope: {}"
}

case "${1:-}" in
  list) cmd_list ;;
  up) cmd_up ;;
  run) shift; cmd_run "${1:-smoke}" ;;
  doctor) cmd_doctor ;;
  validate) cmd_validate ;;
  smoke) cmd_smoke ;;
  *) echo "Usage: $0 {list|up|run|doctor|validate|smoke}"; exit 2 ;;
esac
