#!/usr/bin/env bash
set -euo pipefail

ROOT_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")/.." && pwd)"
REPOS_YML="$ROOT_DIR/repos.yml"
REPO_CONFIG="$ROOT_DIR/scripts/repo_config.py"
DRYRUN=${DRYRUN:-0}

_tmp_dirs=()
cleanup(){
  local d
  for d in "${_tmp_dirs[@]:-}"; do
    [[ -n "$d" && -d "$d" ]] && rm -rf -- "$d"
  done
}
trap cleanup EXIT INT TERM

log(){ printf "%s\n" "$*" >&2; }

die(){ echo "ERR: $*" >&2; exit 1; }

need(){ command -v "$1" >/dev/null 2>&1 || die "Fehlt: $1"; }

check_tools(){
  need rsync
  need git
  need python3
  local m
  m="$(mode)"
  if [[ "$m" == "github" ]]; then
    need jq
    need gh
  fi
}

mode()  { python3 "$REPO_CONFIG" --file "$REPOS_YML" mode; }
owner() {
  local o
  o="$(python3 "$REPO_CONFIG" --file "$REPOS_YML" owner)"
  if [[ -n "$o" ]]; then
    echo "$o"
    return
  fi
  if [[ -n "${GITHUB_OWNER:-}" ]]; then
    echo "$GITHUB_OWNER"
    return
  fi
  die "Kein Owner gefunden (repos.yml github.owner oder GITHUB_OWNER)."
}

check_tools

default_branch_of(){
  local repo="$1"
  python3 "$REPO_CONFIG" --file "$REPOS_YML" default-branch "$repo"
}

repos_from_github() {
  local ow="$(owner)"
  command -v gh >/dev/null 2>&1 || die "GitHub CLI (gh) fehlt."
  gh repo list "$ow" --json name,isPrivate,isFork --limit 200 \
    | jq -r '.[] | select(.isFork == false) | select(.isPrivate == false) | .name'
}

repos_from_static() {
  python3 "$REPO_CONFIG" --file "$REPOS_YML" repos || true
}

repos() {
  local m; m="$(mode)"
  if [[ "$m" == "github" ]]; then
    repos_from_github
  else
    repos_from_static
  fi
}

ordered_repos() {
  local m; m="$(mode)"
  if [[ "$m" == "github" ]]; then
    repos | sort
    return
  fi
  python3 "$REPO_CONFIG" --file "$REPOS_YML" ordered-repos
}

cmd_list() {
  echo "▶ Fleet-Repos:"
  python3 "$REPO_CONFIG" --file "$REPOS_YML" repo-rows \
    | while IFS=$'\t' read -r name branch url deps; do
        [[ -z "$name" ]] && continue
        local line=" - ${name}"
        [[ -n "$branch" ]] && line+=" [branch: ${branch}]"
        [[ -n "$url" ]] && line+=" → ${url}"
        if [[ -n "$deps" ]]; then
          local formatted_deps
          formatted_deps=${deps//,/ , }
          formatted_deps=${formatted_deps// , /, }
          line+=" (depends_on: ${formatted_deps})"
        fi
        echo "$line"
      done
}

copy_templates_into_repo() {
  local r="$1"
  local tmp workdir
  tmp="$(mktemp -d)"; _tmp_dirs+=("$tmp")
  workdir="$(mktemp -d)"; _tmp_dirs+=("$workdir")

  if [[ ! -d "$ROOT_DIR/templates" ]]; then
    echo "Keine templates/ gefunden – skip $r"
    return 0
  fi

  rsync -a --delete "$ROOT_DIR/templates/" "$tmp/"
  python3 - "$tmp" "$r" <<'PY'
import sys
from pathlib import Path

root = Path(sys.argv[1])
repo = sys.argv[2]

for path in root.rglob('*'):
    if not path.is_file():
        continue
    try:
        text = path.read_text(encoding='utf-8')
    except UnicodeDecodeError:
        continue
    if '{{REPO_NAME}}' not in text:
        continue
    path.write_text(text.replace('{{REPO_NAME}}', repo), encoding='utf-8')
PY

  local ow; ow="$(owner)"
  local url_ssh="git@github.com:${ow}/${r}.git"
  local url_https="https://github.com/${ow}/${r}.git"
  local url="$url_ssh"
  local ssh_ok=0
  local gh_path=""

  if command -v gh >/dev/null 2>&1; then
    gh_path="$(command -v gh)"
  fi

  if command -v ssh >/dev/null 2>&1; then
    if ssh -o BatchMode=yes -T git@github.com 2>&1 | grep -q "successfully authenticated"; then
      ssh_ok=1
    fi
  fi

  if (( ! ssh_ok )); then
    url="$url_https"
  fi

  if [[ -n "${GH_TOKEN:-}" && -n "$gh_path" ]]; then
    log "Klonen via gh auf ${ow}/${r}"
    "$gh_path" repo clone "${ow}/${r}" "$workdir" -- --depth 1
  else
    if [[ -n "${GH_TOKEN:-}" ]]; then
      log "Klonen via HTTPS (mit GH_TOKEN credential helper) auf ${ow}/${r}"
      git -c credential.helper='!f(){ echo username=x; echo password=$GH_TOKEN; };f' clone --depth 1 "https://github.com/${ow}/${r}.git" "$workdir"
    else
      log "Klonen via $([[ "$url" == https* ]] && echo "HTTPS" || echo "SSH") auf ${ow}/${r}"
      git clone --depth 1 "$url" "$workdir"
    fi
  fi

  rsync -a "$tmp/." "$workdir/"

  pushd "$workdir" >/dev/null
    local branch="chore/wgx-sync-$(date +%Y%m%d-%H%M%S)"
    git checkout -b "$branch" || true
    git add -A
    if ! git diff --cached --quiet; then
      if (( DRYRUN == 1 )); then
        echo "DRY-RUN: Änderungen erkannt in $r (kein Commit/Push)."
        git status --short
      else
        git -c user.email="codex-bot@local" -c user.name="Codex Bot" commit -m "chore(wgx): sync templates from metarepo"
        git push -u origin "$branch"
        if [[ -n "$gh_path" ]]; then
          local base_branch
          base_branch="$(default_branch_of "$r")"
          local gh_args=(
            pr create
            --fill
            --title "chore(wgx): sync templates from metarepo"
            --body "Automatischer WGX-Sync aus dem metarepo."
            --base "${base_branch:-main}"
          )
          if [[ "${WGX_PR_DRAFT:-0}" == "1" ]]; then
            gh_args+=(--draft)
          fi
          "$gh_path" "${gh_args[@]}" || true
        else
          echo "Hinweis: gh fehlt – PR bitte manuell öffnen."
        fi
      fi
    else
      echo "No changes for $r"
    fi
  popd >/dev/null

  rm -rf -- "$tmp" "$workdir"
}

cmd_up() {
  if (( DRYRUN == 1 )); then
    echo "⚑ Dry-run aktiv – keine Commits oder Pushes."
  fi
  ordered_repos | while read -r r; do
    [[ -z "$r" ]] && continue
    echo "▸ Sync $r"
    copy_templates_into_repo "$r"
  done
}

cmd_run() {
  local target="${1:-ci}"
  command -v gh >/dev/null 2>&1 || die "GitHub CLI (gh) fehlt."
  ordered_repos | while read -r r; do
    [[ -z "$r" ]] && continue
    echo "▸ $r → $target"
    if gh workflow list --repo "$(owner)/$r" --limit 200 | awk '{print $1}' | grep -qx "$target"; then
      gh workflow run "$target" --repo "$(owner)/$r" || echo "skip"
    else
      echo "⚠︎ Workflow '$target' existiert nicht in $r – übersprungen."
    fi
  done
}

cmd_validate() {
  echo "Check: repos.yml parse"
  python3 "$REPO_CONFIG" --file "$REPOS_YML" validate >/dev/null
  echo "OK."
}

cmd_doctor() {
  for bin in python3 rsync git; do
    command -v "$bin" >/dev/null || echo "WARN: $bin fehlt"
  done
  if [[ "$(mode)" == "github" ]]; then
    for bin in jq gh; do
      command -v "$bin" >/dev/null || echo "WARN: $bin fehlt"
    done
  fi
  echo "owner=$(owner)"
  echo "mode=$(mode)"
}

cmd_smoke() {
  local count
  count="$(ordered_repos | sed '/^$/d' | wc -l | tr -d ' ')"
  echo "Repos in scope: ${count:-0}"
}

case "${1:-}" in
  list)
    cmd_list
    ;;
  up)
    shift || true
    old_dryrun=$DRYRUN
    if [[ -n "${1:-}" ]]; then
      case "$1" in
        0|1)
          DRYRUN=$1
          shift || true
          ;;
        *)
          echo "Usage: $0 up [0|1]" >&2
          exit 2
          ;;
      esac
    fi
    cmd_up
    DRYRUN=$old_dryrun
    ;;
  run)
    shift
    cmd_run "${1:-ci}"
    ;;
  doctor)
    cmd_doctor
    ;;
  validate)
    cmd_validate
    ;;
  smoke)
    cmd_smoke
    ;;
  *)
    echo "Usage: $0 {list|up [0|1]|run [workflow=ci]|doctor|validate|smoke}" >&2
    exit 2
    ;;
esac
