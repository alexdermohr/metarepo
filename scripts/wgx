#!/usr/bin/env bash
set -euo pipefail

ROOT_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")/.." && pwd)"
REPOS_YML="$ROOT_DIR/repos.yml"
DRYRUN=${DRYRUN:-0}

_tmp_dirs=()
cleanup(){
  local d
  for d in "${_tmp_dirs[@]:-}"; do
    [[ -n "$d" && -d "$d" ]] && rm -rf -- "$d"
  done
}
trap cleanup EXIT INT TERM

log(){ printf "%s\n" "$*" >&2; }

die(){ echo "ERR: $*" >&2; exit 1; }

need(){ command -v "$1" >/dev/null 2>&1 || die "Fehlt: $1"; }

check_tools(){
  need jq
  need rsync
  need git
  need yq
  need python3
  need file
  local v
  v="$(yq --version 2>/dev/null | grep -oE 'version [0-9.]+' | awk '{print $2}')"
  [[ "$v" =~ ^4\. ]] || die "yq v4 erforderlich (mikefarah/yq). Gefunden: ${v:-unbekannt}"
}

check_tools

mode()  { yq -r '.mode // "static"' "$REPOS_YML"; }
owner() {
  local o
  o="$(yq -r '.github.owner // ""' "$REPOS_YML" 2>/dev/null)"
  if [[ -n "$o" && "$o" != "null" ]]; then
    echo "$o"
    return
  fi
  if [[ -n "${GITHUB_OWNER:-}" ]]; then
    echo "$GITHUB_OWNER"
    return
  fi
  die "Kein Owner gefunden (repos.yml github.owner oder GITHUB_OWNER)."
}

default_branch_of(){
  local repo="$1"
  yq -r --arg repo "$repo" '
    def to_obj:
      if type == "string" then {name: .}
      elif has("name") then .
      else {name: .}
      end;
    [
      (.repos[]? | to_obj),
      (.static.include[]? | to_obj)
    ]
    | flatten
    | unique_by(.name)
    | map(select(.name == $repo))
    | (.[0].default_branch // "main")
  ' "$REPOS_YML"
}

repos_from_github() {
  local ow="$(owner)"
  command -v gh >/dev/null 2>&1 || die "GitHub CLI (gh) fehlt."
  gh repo list "$ow" --json name,isPrivate,isFork --limit 200 \
    | jq -r '.[] | select(.isFork == false) | select(.isPrivate == false) | .name'
}

repos_from_static() {
  yq -r '
    def to_obj:
      if type == "string" then {name: .}
      elif has("name") then .
      else {name: .}
      end;
    [
      (.repos[]? | to_obj),
      (.static.include[]? | to_obj)
    ]
    | flatten
    | unique_by(.name)
    | .[].name
  ' "$REPOS_YML" 2>/dev/null || true
}

repos() {
  local m; m="$(mode)"
  if [[ "$m" == "github" ]]; then
    repos_from_github
  else
    repos_from_static
  fi
}

ordered_repos() {
  local m; m="$(mode)"
  if [[ "$m" == "github" ]]; then
    repos | sort
    return
  fi

  yq -o=json '
    def to_obj:
      if type == "string" then {name: .}
      elif has("name") then .
      else {name: .}
      end;
    [
      (.repos[]? | to_obj),
      (.static.include[]? | to_obj)
    ]
    | flatten
    | unique_by(.name)
  ' "$REPOS_YML" \
  | python3 - <<'PY'
import json
import heapq
import sys

items = json.load(sys.stdin)
if not isinstance(items, list):
    sys.exit(0)

graph = {item["name"]: set() for item in items}
in_degree = {name: 0 for name in graph}

for item in items:
    deps = item.get("depends_on") or []
    for dep in deps:
        if dep not in graph:
            continue
        if item["name"] not in graph[dep]:
            graph[dep].add(item["name"])
            in_degree[item["name"]] += 1

heap = [name for name, deg in in_degree.items() if deg == 0]
heapq.heapify(heap)
order = []

while heap:
    name = heapq.heappop(heap)
    order.append(name)
    for neighbor in sorted(graph[name]):
        in_degree[neighbor] -= 1
        if in_degree[neighbor] == 0:
            heapq.heappush(heap, neighbor)

if len(order) < len(graph):
    sys.stderr.write("WARN: Zyklische/fehlende Abhängigkeiten erkannt – Teilordnung verwendet.\n")
    remaining = sorted(set(graph) - set(order))
    order.extend(remaining)

for name in order:
    sys.stdout.write(f"{name}\n")
PY
}

cmd_list() {
  echo "▶ Fleet-Repos:"
  ordered_repos | while read -r r; do
    [[ -z "$r" ]] && continue
    yq -r --arg repo "$r" '
      def to_obj:
        if type == "string" then {name: .}
        elif has("name") then .
        else {name: .}
        end;
      [
        (.repos[]? | to_obj),
        (.static.include[]? | to_obj)
      ]
      | flatten
      | unique_by(.name)
      | map(select(.name == $repo))
      | (.[0] // {name: $repo})
      | " - " + .name
        + (if has("default_branch") then " [branch: " + .default_branch + "]" else "" end)
        + (if has("url") then " → " + .url else "" end)
        + (if has("depends_on") then " (depends_on: " + (.depends_on | join(", ")) + ")" else "" end)
    ' "$REPOS_YML"
  done
}

copy_templates_into_repo() {
  local r="$1"
  local tmp workdir
  tmp="$(mktemp -d)"; _tmp_dirs+=("$tmp")
  workdir="$(mktemp -d)"; _tmp_dirs+=("$workdir")

  if [[ ! -d "$ROOT_DIR/templates" ]]; then
    echo "Keine templates/ gefunden – skip $r"
    return 0
  fi

  rsync -a --delete "$ROOT_DIR/templates/" "$tmp/"
  while IFS= read -r -d '' f; do
    if file -bi "$f" | grep -q '^text/'; then
      sed -i "s/{{REPO_NAME}}/${r}/g" "$f"
    fi
  done < <(find "$tmp" -type f -print0)

  local ow; ow="$(owner)"
  local url_ssh="git@github.com:${ow}/${r}.git"
  local url_https="https://github.com/${ow}/${r}.git"
  local url="$url_ssh"
  local ssh_ok=0
  local gh_path=""

  if command -v gh >/dev/null 2>&1; then
    gh_path="$(command -v gh)"
  fi

  if command -v ssh >/dev/null 2>&1; then
    if ssh -o BatchMode=yes -T git@github.com 2>&1 | grep -q "successfully authenticated"; then
      ssh_ok=1
    fi
  fi

  if (( ! ssh_ok )); then
    url="$url_https"
  fi

  if [[ -n "${GH_TOKEN:-}" && -n "$gh_path" ]]; then
    log "Klonen via gh auf ${ow}/${r}"
    "$gh_path" repo clone "${ow}/${r}" "$workdir" -- --depth 1
  else
    if [[ -n "${GH_TOKEN:-}" ]]; then
      url="https://${GH_TOKEN}@github.com/${ow}/${r}.git"
    fi
    log "Klonen via $([[ "$url" == https* ]] && echo "HTTPS" || echo "SSH") auf ${ow}/${r}"
    git clone --depth 1 "$url" "$workdir"
  fi

  rsync -a "$tmp/." "$workdir/"

  pushd "$workdir" >/dev/null
    local branch="chore/wgx-sync-$(date +%Y%m%d-%H%M%S)"
    git checkout -b "$branch" || true
    git add -A
    if ! git diff --cached --quiet; then
      if (( DRYRUN == 1 )); then
        echo "DRY-RUN: Änderungen erkannt in $r (kein Commit/Push)."
        git status --short
      else
        git -c user.email="codex-bot@local" -c user.name="Codex Bot" commit -m "chore(wgx): sync templates from metarepo"
        git push -u origin "$branch"
        if [[ -n "$gh_path" ]]; then
          local base_branch
          base_branch="$(default_branch_of "$r")"
          local gh_args=(
            pr create
            --fill
            --title "chore(wgx): sync templates from metarepo"
            --body "Automatischer WGX-Sync aus dem metarepo."
            --base "${base_branch:-main}"
          )
          if [[ "${WGX_PR_DRAFT:-0}" == "1" ]]; then
            gh_args+=(--draft)
          fi
          "$gh_path" "${gh_args[@]}" || true
        else
          echo "Hinweis: gh fehlt – PR bitte manuell öffnen."
        fi
      fi
    else
      echo "No changes for $r"
    fi
  popd >/dev/null

  rm -rf -- "$tmp" "$workdir"
}

cmd_up() {
  if (( DRYRUN == 1 )); then
    echo "⚑ Dry-run aktiv – keine Commits oder Pushes."
  fi
  ordered_repos | while read -r r; do
    [[ -z "$r" ]] && continue
    echo "▸ Sync $r"
    copy_templates_into_repo "$r"
  done
}

cmd_run() {
  local target="${1:-ci}"
  command -v gh >/dev/null 2>&1 || die "GitHub CLI (gh) fehlt."
  ordered_repos | while read -r r; do
    [[ -z "$r" ]] && continue
    echo "▸ $r → $target"
    if gh workflow list --repo "$(owner)/$r" --limit 200 | awk '{print $1}' | grep -qx "$target"; then
      gh workflow run "$target" --repo "$(owner)/$r" || echo "skip"
    else
      echo "⚠︎ Workflow '$target' existiert nicht in $r – übersprungen."
    fi
  done
}

cmd_validate() {
  echo "Check: repos.yml schema"
  yq -e '.' "$REPOS_YML" >/dev/null
  echo "OK."
}

cmd_doctor() {
  for bin in yq jq rsync git gh; do
    command -v "$bin" >/dev/null || echo "WARN: $bin fehlt"
  done
  echo "owner=$(owner)"
  echo "mode=$(mode)"
}

cmd_smoke() {
  local count
  count="$(ordered_repos | sed '/^$/d' | wc -l | tr -d ' ')"
  echo "Repos in scope: ${count:-0}"
}

case "${1:-}" in
  list)
    cmd_list
    ;;
  up)
    shift || true
    old_dryrun=$DRYRUN
    if [[ -n "${1:-}" ]]; then
      case "$1" in
        0|1)
          DRYRUN=$1
          shift || true
          ;;
        *)
          echo "Usage: $0 up [0|1]" >&2
          exit 2
          ;;
      esac
    fi
    cmd_up
    DRYRUN=$old_dryrun
    ;;
  run)
    shift
    cmd_run "${1:-ci}"
    ;;
  doctor)
    cmd_doctor
    ;;
  validate)
    cmd_validate
    ;;
  smoke)
    cmd_smoke
    ;;
  *)
    echo "Usage: $0 {list|up [0|1]|run|doctor|validate|smoke}" >&2
    exit 2
    ;;
esac
